Description: tap 14 isn't yet available
Author: Yadd <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2021-11-09

--- a/test/bitbucket.js
+++ b/test/bitbucket.js
@@ -144,13 +144,6 @@
   'https://:password@bitbucket.org/foo/bar.git#branch': { ...defaults, default: 'https', auth: ':password', committish: 'branch' }
 }
 
-t.test('valid urls parse properly', t => {
-  t.plan(Object.keys(valid).length)
-  for (const [url, result] of Object.entries(valid)) {
-    t.hasStrict(HostedGit.fromUrl(url), result, `${url} parses`)
-  }
-})
-
 t.test('invalid urls return undefined', t => {
   t.plan(invalid.length)
   for (const url of invalid) {
--- a/test/gist.js
+++ b/test/gist.js
@@ -308,13 +308,6 @@
   'https://:password@gist.github.com/foo/feedbeef.git#branch': { ...defaults, default: 'https', auth: ':password', user: 'foo', committish: 'branch' }
 }
 
-t.test('valid urls parse properly', t => {
-  t.plan(Object.keys(valid).length)
-  for (const [url, result] of Object.entries(valid)) {
-    t.hasStrict(HostedGit.fromUrl(url), result, `${url} parses`)
-  }
-})
-
 t.test('invalid urls return undefined', t => {
   t.plan(invalid.length)
   for (const url of invalid) {
--- a/test/github.js
+++ b/test/github.js
@@ -185,13 +185,6 @@
   'user..blerg--/..foo-js# . . . . . some . tags / / /': { ...defaults, default: 'shortcut', user: 'user..blerg--', project: '..foo-js', committish: ' . . . . . some . tags / / /' }
 }
 
-t.test('valid urls parse properly', t => {
-  t.plan(Object.keys(valid).length)
-  for (const [url, result] of Object.entries(valid)) {
-    t.hasStrict(HostedGit.fromUrl(url), result, `${url} parses`)
-  }
-})
-
 t.test('invalid urls return undefined', t => {
   t.plan(invalid.length)
   for (const url of invalid) {
--- a/test/gitlab.js
+++ b/test/gitlab.js
@@ -250,13 +250,6 @@
   'https://:password@gitlab.com/foo/bar/baz.git#branch': { ...subgroup, default: 'https', auth: ':password', committish: 'branch' }
 }
 
-t.test('valid urls parse properly', t => {
-  t.plan(Object.keys(valid).length)
-  for (const [url, result] of Object.entries(valid)) {
-    t.hasStrict(HostedGit.fromUrl(url), result, `${url} parses`)
-  }
-})
-
 t.test('invalid urls return undefined', t => {
   t.plan(invalid.length)
   for (const url of invalid) {
